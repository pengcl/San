name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: 'registry.hub.docker.com'
  IMAGE_NAME: 'three-kingdoms-web-client'

jobs:
  # 代码质量检查
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality & Linting

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Run Prettier check
        run: npm run format:check
        continue-on-error: true

      - name: TypeScript type check
        run: npm run type-check

      - name: Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results
          path: |
            eslint-report.json
            coverage/
          retention-days: 30

  # 单元测试
  unit-tests:
    runs-on: ubuntu-latest
    name: Unit Tests
    needs: code-quality

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests
        run: npm run test:ci
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-node${{ matrix.node-version }}
          path: |
            coverage/
            test-results.xml
          retention-days: 30

  # E2E测试
  e2e-tests:
    runs-on: ubuntu-latest
    name: E2E Tests
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Start preview server
        run: npm run preview &
        env:
          NODE_ENV: production

      - name: Wait for server
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:4173; do sleep 1; done'

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 30

  # 构建应用
  build:
    runs-on: ubuntu-latest
    name: Build Application
    needs: [unit-tests, e2e-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Optimize images
        run: npm run optimize-images

      - name: Build application
        run: npm run build:prod
        env:
          NODE_ENV: production
          CI: true

      - name: Analyze bundle size
        run: |
          npm install -g webpack-bundle-analyzer
          npx webpack-bundle-analyzer dist/assets/*.js --report --mode static --report-filename bundle-report.html

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            bundle-report.html
          retention-days: 30

      - name: Upload build stats
        uses: actions/upload-artifact@v4
        with:
          name: build-stats
          path: |
            dist/stats.json
            bundle-report.html
          retention-days: 30

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: snyk-report.json
          retention-days: 30

  # Docker构建和推送
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build & Push
    needs: [build, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        if: github.event_name != 'pull_request'
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    name: Deploy to Development
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
      - name: Deploy to development server
        run: |
          echo "Deploying to development environment..."
          # 这里可以添加实际的部署脚本
          # 例如：kubectl, docker-compose, ansible等

      - name: Run health checks
        run: |
          echo "Running health checks..."
          # 添加健康检查脚本

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: docker-build
    if: github.event_name == 'release'
    environment: production

    steps:
      - name: Deploy to production server
        run: |
          echo "Deploying to production environment..."
          # 这里可以添加实际的部署脚本

      - name: Run health checks
        run: |
          echo "Running production health checks..."
          # 添加生产环境健康检查

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: '🚀 Production deployment successful!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: '❌ Production deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 性能监控
  performance-monitoring:
    runs-on: ubuntu-latest
    name: Performance Monitoring
    needs: deploy-prod
    if: github.event_name == 'release'

    steps:
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://your-production-domain.com
            https://your-production-domain.com/heroes
            https://your-production-domain.com/inventory
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: '.lighthouseci/'
          retention-days: 30
