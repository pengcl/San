name: Scheduled Tasks

on:
  schedule:
    # 每天凌晨2点运行依赖检查
    - cron: '0 2 * * *'
    # 每周一凌晨3点运行安全扫描
    - cron: '0 3 * * 1'
    # 每月1号凌晨4点运行性能测试
    - cron: '0 4 1 * *'
  workflow_dispatch:
    inputs:
      task_type:
        description: '选择要运行的任务'
        required: true
        default: 'dependency-check'
        type: choice
        options:
          - dependency-check
          - security-audit
          - performance-test
          - cleanup

env:
  NODE_VERSION: '18'

jobs:
  # 依赖检查
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check
    if: github.event.schedule == '0 2 * * *' || github.event.inputs.task_type == 'dependency-check'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for outdated dependencies
        run: |
          npm ci --prefer-offline --no-audit
          npm outdated --json > outdated-deps.json || true
          cat outdated-deps.json

      - name: Check for vulnerable dependencies
        run: |
          npm audit --json > audit-results.json || true
          cat audit-results.json

      - name: Generate dependency report
        run: |
          cat > dependency-report.md << 'EOF'
          # 依赖检查报告

          生成时间: $(date)

          ## 过时的依赖
          ```json
          $(cat outdated-deps.json)
          ```

          ## 安全漏洞
          ```json
          $(cat audit-results.json)
          ```

          ## 建议
          - 定期更新依赖到最新稳定版本
          - 及时修复安全漏洞
          - 关注依赖的生命周期状态
          EOF

      - name: Create issue for outdated dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const outdated = JSON.parse(fs.readFileSync('outdated-deps.json', 'utf8'));
              const audit = JSON.parse(fs.readFileSync('audit-results.json', 'utf8'));
              
              if (Object.keys(outdated).length > 0 || audit.metadata?.vulnerabilities?.total > 0) {
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  labels: 'dependencies,scheduled',
                  state: 'open'
                });
                
                const existingIssue = issues.data.find(issue => 
                  issue.title.includes('依赖更新提醒')
                );
                
                const issueBody = `
                ## 📦 依赖检查报告
                
                **检查时间**: ${new Date().toLocaleString('zh-CN')}
                
                ### 过时的依赖包
                ${Object.keys(outdated).length > 0 ? 
                  Object.entries(outdated).map(([pkg, info]) => 
                    `- **${pkg}**: ${info.current} → ${info.wanted} (latest: ${info.latest})`
                  ).join('\n') : 
                  '✅ 所有依赖都是最新版本'
                }
                
                ### 安全漏洞
                ${audit.metadata?.vulnerabilities?.total > 0 ?
                  `⚠️ 发现 ${audit.metadata.vulnerabilities.total} 个安全漏洞` :
                  '✅ 未发现安全漏洞'
                }
                
                ### 建议操作
                - [ ] 检查并更新过时的依赖
                - [ ] 修复安全漏洞
                - [ ] 运行测试确保更新后功能正常
                
                ---
                🤖 此报告由定时任务自动生成
                `;
                
                if (existingIssue) {
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    body: issueBody
                  });
                } else {
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: `📦 依赖更新提醒 - ${new Date().toLocaleDateString('zh-CN')}`,
                    body: issueBody,
                    labels: ['dependencies', 'scheduled', 'maintenance']
                  });
                }
              }
            } catch (error) {
              console.log('Error processing dependency check:', error);
            }

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            outdated-deps.json
            audit-results.json
            dependency-report.md
          retention-days: 30

  # 安全审计
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    if: github.event.schedule == '0 3 * * 1' || github.event.inputs.task_type == 'security-audit'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run security audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Run CodeQL analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --json > snyk-results.json
        continue-on-error: true

      - name: Security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: 'trivy-results.json'

      - name: Generate security report
        run: |
          cat > security-report.md << 'EOF'
          # 安全审计报告

          生成时间: $(date)

          ## NPM审计结果
          ```json
          $(cat npm-audit.json)
          ```

          ## Trivy扫描结果
          ```json
          $(cat trivy-results.json)
          ```

          ## 建议
          - 及时更新有安全漏洞的依赖
          - 启用自动安全更新
          - 定期进行安全代码审查
          EOF

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-reports
          path: |
            npm-audit.json
            snyk-results.json
            trivy-results.json
            security-report.md
          retention-days: 90

  # 性能测试
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Test
    if: github.event.schedule == '0 4 1 * *' || github.event.inputs.task_type == 'performance-test'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Start preview server
        run: |
          npm run preview &
          sleep 10

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          lhci autorun --config=.lighthouserc.json
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Bundle size analysis
        run: |
          npm install -g webpack-bundle-analyzer
          npx webpack-bundle-analyzer dist/assets/*.js --report --mode json --report-filename bundle-analysis.json

      - name: Generate performance report
        run: |
          cat > performance-report.md << 'EOF'
          # 性能测试报告

          生成时间: $(date)

          ## Lighthouse评分
          [查看详细报告](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

          ## Bundle大小分析
          ```json
          $(cat bundle-analysis.json)
          ```

          ## 建议
          - 优化图片资源
          - 代码分割优化
          - 缓存策略改进
          EOF

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-reports
          path: |
            .lighthouseci/
            bundle-analysis.json
            performance-report.md
          retention-days: 90

  # 清理任务
  cleanup:
    runs-on: ubuntu-latest
    name: Cleanup Old Artifacts
    if: github.event.inputs.task_type == 'cleanup'

    steps:
      - name: Delete old workflow runs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              per_page: 100
            });

            // 保留最新的30个运行记录，删除其余的
            const runsToDelete = runs.workflow_runs.slice(30);

            for (const run of runsToDelete) {
              if (run.status === 'completed') {
                try {
                  await github.rest.actions.deleteWorkflowRun({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    run_id: run.id
                  });
                  console.log(`Deleted workflow run ${run.id}`);
                } catch (error) {
                  console.log(`Failed to delete workflow run ${run.id}: ${error.message}`);
                }
              }
            }

      - name: Clean Docker registry
        run: |
          echo "清理Docker镜像..."
          # 这里可以添加清理Docker镜像的脚本

  # 通知
  notify-results:
    runs-on: ubuntu-latest
    name: Notify Results
    needs: [dependency-check, security-audit, performance-test]
    if: always()

    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            📊 定时任务执行完成

            🔍 依赖检查: ${{ needs.dependency-check.result || 'skipped' }}
            🔒 安全审计: ${{ needs.security-audit.result || 'skipped' }}
            ⚡ 性能测试: ${{ needs.performance-test.result || 'skipped' }}

            📅 执行时间: $(date)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
